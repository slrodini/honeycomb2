#include <honeycomb2/gauss_kronrod.hpp>

namespace
{

constexpr double _LOCAL_DBL_EPSILON_     = 2.2204460492503131e-16;
constexpr double _LOCAL_DBL_MIN_         = 2.2250738585072014e-308;
constexpr double _1000_LOCAL_DBL_MIN_    = 2.2250738585072014e-305;
constexpr double _100_LOCAL_DBL_EPSILON_ = 2.2204460492503131e-14;
constexpr double _50_LOCAL_DBL_EPSILON_  = 1.1102230246251565e-14;

static inline bool subinterval_too_small(double a1, double a2, double b2)
{
   const double tmp = (1 + _100_LOCAL_DBL_EPSILON_) * (std::fabs(a2) + _1000_LOCAL_DBL_MIN_);
   return std::fabs(a1) <= tmp && std::fabs(b2) <= tmp;
}
} // namespace

namespace Honeycomb
{
namespace Integration
{
// SECTION: 21
const std::array<double, 11> GK_21::x_gk = {
    0.995657163025808080735527280689003, 0.973906528517171720077964012084452, 0.930157491355708226001207180059508,
    0.865063366688984510732096688423493, 0.780817726586416897063717578345042, 0.679409568299024406234327365114874,
    0.562757134668604683339000099272694, 0.433395394129247190799265943165784, 0.294392862701460198131126603103866,
    0.148874338981631210884826001129720, 0.000000000000000000000000000000000};
const std::array<double, 5> GK_21::w_g   = {0.066671344308688137593568809893332, 0.149451349150580593145776339657697,
                                            0.219086362515982043995534934228163, 0.269266719309996355091226921569469,
                                            0.295524224714752870173892994651338};
const std::array<double, 11> GK_21::w_gk = {
    0.011694638867371874278064396062192, 0.032558162307964727478818972459390, 0.054755896574351996031381300244580,
    0.075039674810919952767043140916190, 0.093125454583697605535065465083366, 0.109387158802297641899210590325805,
    0.123491976262065851077958109831074, 0.134709217311473325928054001771707, 0.142775938577060080797094273138717,
    0.147739104901338491374841515972068, 0.149445554002916905664936468389821};

// SECTION: 41
const std::array<double, 21> GK_41::x_gk = {
    0.998859031588277663838315576545863, 0.993128599185094924786122388471320, 0.981507877450250259193342994720217,
    0.963971927277913791267666131197277, 0.940822633831754753519982722212443, 0.912234428251325905867752441203298,
    0.878276811252281976077442995113078, 0.839116971822218823394529061701521, 0.795041428837551198350638833272788,
    0.746331906460150792614305070355642, 0.693237656334751384805490711845932, 0.636053680726515025452836696226286,
    0.575140446819710315342946036586425, 0.510867001950827098004364050955251, 0.443593175238725103199992213492640,
    0.373706088715419560672548177024927, 0.301627868114913004320555356858592, 0.227785851141645078080496195368575,
    0.152605465240922675505220241022678, 0.076526521133497333754640409398838, 0.000000000000000000000000000000000};
const std::array<double, 10> GK_41::w_g  = {0.017614007139152118311861962351853, 0.040601429800386941331039952274932,
                                            0.062672048334109063569506535187042, 0.083276741576704748724758143222046,
                                            0.101930119817240435036750135480350, 0.118194531961518417312377377711382,
                                            0.131688638449176626898494499748163, 0.142096109318382051329298325067165,
                                            0.149172986472603746787828737001969, 0.152753387130725850698084331955098};
const std::array<double, 21> GK_41::w_gk = {
    0.003073583718520531501218293246031, 0.008600269855642942198661787950102, 0.014626169256971252983787960308868,
    0.020388373461266523598010231432755, 0.025882133604951158834505067096153, 0.031287306777032798958543119323801,
    0.036600169758200798030557240707211, 0.041668873327973686263788305936895, 0.046434821867497674720231880926108,
    0.050944573923728691932707670050345, 0.055195105348285994744832372419777, 0.059111400880639572374967220648594,
    0.062653237554781168025870122174255, 0.065834597133618422111563556969398, 0.068648672928521619345623411885368,
    0.071054423553444068305790361723210, 0.073030690332786667495189417658913, 0.074582875400499188986581418362488,
    0.075704497684556674659542775376617, 0.076377867672080736705502835038061, 0.076600711917999656445049901530102};

// SECTION: 61
const std::array<double, 31> GK_61::x_gk = {
    0.999484410050490637571325895705811, 0.996893484074649540271630050918695, 0.991630996870404594858628366109486,
    0.983668123279747209970032581605663, 0.973116322501126268374693868423707, 0.960021864968307512216871025581798,
    0.944374444748559979415831324037439, 0.926200047429274325879324277080474, 0.905573307699907798546522558925958,
    0.882560535792052681543116462530226, 0.857205233546061098958658510658944, 0.829565762382768397442898119732502,
    0.799727835821839083013668942322683, 0.767777432104826194917977340974503, 0.733790062453226804726171131369528,
    0.697850494793315796932292388026640, 0.660061064126626961370053668149271, 0.620526182989242861140477556431189,
    0.579345235826361691756024932172540, 0.536624148142019899264169793311073, 0.492480467861778574993693061207709,
    0.447033769538089176780609900322854, 0.400401254830394392535476211542661, 0.352704725530878113471037207089374,
    0.304073202273625077372677107199257, 0.254636926167889846439805129817805, 0.204525116682309891438957671002025,
    0.153869913608583546963794672743256, 0.102806937966737030147096751318001, 0.051471842555317695833025213166723,
    0.000000000000000000000000000000000};
const std::array<double, 15> GK_61::w_g = {
    0.007968192496166605615465883474674, 0.018466468311090959142302131912047, 0.028784707883323369349719179611292,
    0.038799192569627049596801936446348, 0.048402672830594052902938140422808, 0.057493156217619066481721689402056,
    0.065974229882180495128128515115962, 0.073755974737705206268243850022191, 0.080755895229420215354694938460530,
    0.086899787201082979802387530715126, 0.092122522237786128717632707087619, 0.096368737174644259639468626351810,
    0.099593420586795267062780282103569, 0.101762389748405504596428952168554, 0.102852652893558840341285636705415};
const std::array<double, 31> GK_61::w_gk = {
    0.001389013698677007624551591226760, 0.003890461127099884051267201844516, 0.006630703915931292173319826369750,
    0.009273279659517763428441146892024, 0.011823015253496341742232898853251, 0.014369729507045804812451432443580,
    0.016920889189053272627572289420322, 0.019414141193942381173408951050128, 0.021828035821609192297167485738339,
    0.024191162078080601365686370725232, 0.026509954882333101610601709335075, 0.028754048765041292843978785354334,
    0.030907257562387762472884252943092, 0.032981447057483726031814191016854, 0.034979338028060024137499670731468,
    0.036882364651821229223911065617136, 0.038678945624727592950348651532281, 0.040374538951535959111995279752468,
    0.041969810215164246147147541285970, 0.043452539701356069316831728117073, 0.044814800133162663192355551616723,
    0.046059238271006988116271735559374, 0.047185546569299153945261478181099, 0.048185861757087129140779492298305,
    0.049055434555029778887528165367238, 0.049795683427074206357811569379942, 0.050405921402782346840893085653585,
    0.050881795898749606492297473049805, 0.051221547849258772170656282604944, 0.051426128537459025933862879215781,
    0.051494729429451567558340433647099};

template <typename Rule>
requires IsGKRule<Rule, Rule::size>
std::tuple<double, double, double>
GaussKronrod<Rule>::gauss_kronrod_simplified(std::function<double(double)> const &fnc, double const &a, double const &b)
{
   const size_t n           = Rule::size;
   const double center      = 0.5 * (a + b);
   const double half_length = 0.5 * (b - a);
   const double f_center    = fnc(center);

   double result_gauss   = 0;
   double result_kronrod = f_center * Rule::w_gk[n - 1];

   if (n % 2 == 0) result_gauss = f_center * Rule::w_g[n / 2 - 1];

   for (size_t j = 0, jtw = 1; j < (n - 1) / 2; j++, jtw += 2) {
      const double abscissa  = half_length * Rule::x_gk[jtw];
      const double fv1       = fnc(center - abscissa);
      const double fv2       = fnc(center + abscissa);
      const double fsum      = fv1 + fv2;
      result_gauss          += Rule::w_g[j] * fsum;
      result_kronrod        += Rule::w_gk[jtw] * fsum;
   }

   for (size_t j = 0; j < n - 1; j += 2) {
      const double abscissa  = half_length * Rule::x_gk[j];
      const double fv1       = fnc(center - abscissa);
      const double fv2       = fnc(center + abscissa);
      result_kronrod        += Rule::w_gk[j] * (fv1 + fv2);
   }

   result_kronrod *= half_length;
   result_gauss   *= half_length;

   return std::make_tuple(result_kronrod, std::fabs(1.0 - result_gauss / result_kronrod),
                          std::fabs(result_kronrod - result_gauss));
}

template <typename Rule>
requires IsGKRule<Rule, Rule::size>
std::tuple<double, double, double>
GaussKronrod<Rule>::gauss_kronrod_recursive_step(std::function<double(double)> const &fnc, double const &a,
                                                 double const &b, size_t depth, double eps_rel, double eps_abs)
{
   auto [res, err_rel, err_abs] = gauss_kronrod_simplified(fnc, a, b);
   const double center          = (a + b) * 0.5;

   if (err_abs <= eps_abs || err_rel <= eps_rel || subinterval_too_small(a, center, b) || depth > 200)
      return {res, err_rel, err_abs};

   depth++;
   auto [res_1, err_rel_1, err_abs_1] = gauss_kronrod_recursive_step(fnc, a, center, depth, eps_rel, eps_abs);
   auto [res_2, err_rel_2, err_abs_2] = gauss_kronrod_recursive_step(fnc, center, b, depth, eps_rel, eps_abs);
   return {res_1 + res_2, sqrt(err_rel_1 * err_rel_1 + err_rel_2 * err_rel_2),
           sqrt(err_abs_1 * err_abs_1 + err_abs_2 * err_abs_2)};
}

template <typename Rule>
requires IsGKRule<Rule, Rule::size>
double GaussKronrod<Rule>::integrate(std::function<double(double)> const &fnc, double const &a, double const &b,
                                     double eps_rel, double eps_abs)
{
   auto res = gauss_kronrod_recursive_step(fnc, a, b, 0, eps_rel, eps_abs);
   return std::get<0>(res);
}

template struct GaussKronrod<GK_21>;
template struct GaussKronrod<GK_41>;
template struct GaussKronrod<GK_61>;

} // namespace Integration
} // namespace Honeycomb